Filnamn:
	Källkodsfiler ska ha ändelserna .h respektive .cpp.
	Filnamn döps efter klass namnet om dom definerar en klass eller efter
		användingsområde/ansvar. 
	Alla filer ska skrivas enbart med små bokstäver (HELL Linux).
	Varje class ska placeras i sin egen fil.


Kod
	All kod skrivs med indentering motsvarande tre blanksteg och tab-tecken 
	är det som bör användas. Rader bör vara kortare än 80 tecken så att alla 
	utvecklare slipper köpa widescreen skärmar.

Kodstandard
	All kod ska följa ISO/ANSI C++ och ska kompilera utan varningar under 
	följande inställningar:
		VC++ 6.0:	Warning Level 3
		GCC ??:		???

	Platformsberoende kod ska undvikas och kan om növändigt endast placeras
		i modulen Basic. 
	const ska användas för att markera att funktion/metod inte ändrar på 
		någon variabel.

	ZFAssert ska användas för assert. Finns i basic och tar test som första 
		parameter och en sträng som andra parameter. Strängen ska vara 
		"class::function: Beskrivning".

Headerfiler
	#ifndef skrivs som MODUL_FILNAMN_H_
	En .h fil ska endast innehålla det som krävs för interfacet till klassen
		(dvs att använda den). Saker som endast krävs för implentationen av 
		klassen ska placeras i källkodsfilen.

	Headerfiler utanför den lokala katalogen refererar man till med
	sökvägar relativt källkodsroten, dvs #include "res/res.h".
	/ används som sökvägsseparatortecken.

	Layout är samma som källkodsfiler.

Källkodsfiler:
	Layout:
		<Copyright>				
		<File Header>		Är en std kommentar som beskriver filens namn, 
			vad den gör och liknande. Kolla i filehead.txt för att se hur 
			den ska se ut.
		<Include Files>		I bokstavs ordning och med std filer först och
			våra filer sedan. 
		<Define / Macro>	Defines / macros som behövs i denna källkods fil.
		<Types>				Type för denna källkodsfil 
			(typedefs / union / struct / class).
		<Functions>			Member functions i samma ordning som angivits i 
			class.
		<Comment>			Om långa beskrivningar krävs skrivs dom längst 
			ned i ett eget kommentar fält.

Kommentarer
	Klasser, metoder och medlemsvariabler skall kommenteras i headerfilen.
	
	Bookmarks används för att markera olika platser i källkoden. Alla 
		bookmarks skrivs som BM-*** där *** är en tag som varierar med vilken
		typ av bookmark det är.

		BM-NOTE "namn"
			En extra lång kommentar finns i <Comment> fältet under det namn 
			som anges.
		BM-REF "..."
			En referens till ett annat dokument. Skrivs som länk eller boknamn 
			och sidor.
		BM-CHECK "namn" "vad"
			Anger att "namn" ska undersöka "vad". Kan vara att kolla att en 
			funktion fungerar som den ska.
		BM-BUG "namn" "beskrivning"
			Anger att en bug har hittats och ska rättas till.

	Kommentarer ska anges i format som förstås av DoxyGen. 

		För klasser och structs så använder man /// för att skapa kommentaret.
			Dessa placeras ovanför det man ska dokumentera.
		Korta kommentarer för medlemar i klassdeklarationer angers med /// på en enda
			rad ovanför deklarationen eller med ///< på samma rad efter.
		Detaljerade kommentarer anges för funktioner med /// ovanför implentationen.

		För att dokumentera vad en fil gör så anger man följande högst upp i den.

		/**	\file 
			Short Desc (One Line only).
			Long Desc...

		*/


		/** \file file.h
 * A brief file description.
 * A more elaborated file description.
 */

	Stora mängder utkommenterad kod singneras.

		Ex: /* COMMENT OUT by: Zeb .... */

		Detta förhindrar att någon av misstag råkar ta bort kod som i själva verket inte skulle 
		tas bort utan som bara kommenterats ut så länge (tex. för att testa ny funktionalitet)
		sammt förenklar för den person som vill rensa undan och snygga upp filer.

		Är ett kodblock utkommenterat men inte signerat så klassas detta som skräpkod och
		riskeras att raderas.
		

Names:
	Klass / Struct / Unions
		Skrivs i MixedCase.
		Åtkomstblocken i klasser / respektive källkodsfiler anges i ordningen 
			private, protected och public. Det ska bara finnas en av varje.
	
		Class Prefixes:
			Class name					C			
			Interface name				I			Abstrakt class.
			Structure name				S			

	Enums/Const
		Skrivs i stora bokstäver.

	Identifierare (data/variabler)
		<scope>_<Modifier><type><Name>
		
		Scope:
			Global						g_
			Class Member				m_
			Static						s_
			Const						c_
						
		Modifiers:
			Pointer to					p			
			Reference to				r			
			Array						a			
			Objekt						k			
			Funktionspekare				o			
			Unsigned 					u	

		Types:
			void						v
			Char						c
			Short						s
			Integer						i
			Long						l
			Boolean						b
			Float						f
			Double						d
			Enumeration					e			

			C-String					sz	Null terminated c-stryle string.
			string (C++)				str	C++ string object.


Felhantering

