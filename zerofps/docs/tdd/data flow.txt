Resurser är data filer som används av zerofps. Ex är MAD's, Ljud, Musik och Text Filer. Dom
behöver refereras till och även föras över nätverk ibland. Alla resurser baseras på samma 
grundläggande klass ZFResource och dom hanteras i grunden på samma sätt och har alla liknande 
egenskaper. Alla resurer är gjorda för att laddas in/ut dynamiskt.

Mål:
-Alla resurser laddas in/ur under spelets gång.
-Dom ska alla vara gjorda för snabb in/ur laddning. Ex inläsning sker genom att allt läses in
 och används direkt utan uträkningar.
-Misslyckad laddning får aldrig leda till att programet krashar utan ska leda till warning 
 eller ett fint fel message.
-Alla resurser laddas ur en tid efter dom inte längre används.
-När man laddar en resurs så får man ett handle object till det som används för att komma åt 
 det snabbare. Det ska användas istället för pekare så långt som möjligt och det är den som kan
 sändas över nätverket.
-Resurserna måste finnas i ZF fil system för att kunna användas.

ZFResourceManger:
Håller koll på alla laddade resurser i spelet. 

	- Refresh:	Ska köras varje frame. Undersöker alla object och ser om det 
				är några som kan laddas ur.


ZFResource:
Är den datan som ZFResourceManger lagrar om varje laddad resurs.

	- ID:			Unikt ID för denna resurs.
	- Räknare:	Antal användare för denna resurs.
	- Timer:		Tid då resurs ska laddas ur.
	- Ptr:		Pekare till resurs objectet.

	- SetRes:
	- FreeRes:

ZFResourceHandle:
Det handle som man får för att komma åt resurser när man använder resurs hanteraren.
Denna klass är abstrakt ska överlagras för varje spec resurs man vill ladda.
	
	- ID:		ID för den resurs som detta handle refererar till.

	- SetRes:
	- FreeRes:



 ZFRes_MAD:				
	* Filer med MAD modeller.
	 
 ZFRes_Sound:				
 ZFRes_Music:			
 ZFRes_Speach:			
 ZFRes_Texture:			

Ex Code:
	ZFRes_MAD	bomb;
	bomb.SetRes("modell/bomb.mad");
	ZFRes_MAD	bomb2;
	bomb2 = bomb;
	bomb.UnLoad();
	bomb2.UnLoad();



För att använda en resurs i ZeroFps så skapar man först ett Handle av rätt typ, ex ZFResMad. Sen 
anger man vilken resurs den ska innehålla med ZFResMad.SetRes("modell/skelleton.mad"). När man
är klar så låter man objectet gå ur scope så tar det bort referensen till den laddade resursen.
Om ingen mer använder den resursen så är det då möjligt att den laddas ur.

Varje resurs har även en Time To Live (TTL) som gör att dom inte laddas ur direkt när sista 
referensen till dom släpps. 

Varje handle är sen en short som kan sändas över nätveket. När en client får ett handle så kollar
den upp den i sitt resurs table för att se om den finns beskriven där. Om inte så måste den fråga
servern vilken resurs det är som motsvarar detta handle.

Eftersom man aldrig kan vara säker på att man kan använda ett handle direkt när man får det 
(client måste fråga efter resurse, hämta den över nätverket, ladda den) så ska alla användande av 
resurser på client sidan lyckas oavsett om resursen finns eller ej. Det innebär att handle kan
användas som vanligt men själva resurs datan kan komma att laddas senare.




